using声明
使用某个命名空间：例如 using std::cin表示使用命名空间std中的名字cin。
头文件中不应该包含using声明。这样使用了该头文件的源码也会使用这个声明，会带来风险。

string
标准库类型string表示可变长的字符序列。
#include <string>，然后 using std::string;
string对象：注意，不同于字符串字面值。

定义和初始化string对象
    拷贝初始化（copy initialization）：使用等号=将一个已有的对象拷贝到正在创建的对象。
    直接初始化（direct initialization）：通过括号给对象赋值。

string对象上的操作
    string io：
    执行读操作>>：忽略掉开头的空白（包括空格、换行符和制表符），直到遇到下一处空白为止。
    getline：读取一整行，包括空白符。
    s.size()返回的时string::size_type类型，记住是一个无符号类型的值，不要和int混用
    s1+s2使用时，保证至少一侧是string类型。string s1 = "hello" + "world" // 错误，两侧均为字符串字面值
    字符串字面值和string是不同的类型。

处理string对象中的字符：尽量使用c++版本的头文件，即cctype P82
    遍历字符串：使用范围for（range for）语句： for (auto c: str)，或者 for (auto &c: str)使用[引用]直接改变字符串中的字符。 （C++11）
    str[x],[]输入参数为string::size_type类型，给出int整型也会自动转化为该类型

vector
    vector是一个容器，也是一个类模板；
    #include <vector> 然后 using std::vector;
    容器：包含其他对象。
    类模板：本身不是类，但可以实例化instantiation出一个类。 [vector是一个模板， vector<int>是一个类型。]
    通过将类型放在类模板名称后面的尖括号中来指定类型，如vector<int> ivec。

定义和初始化vector对象
    列表初始化： vector<string> v{"a", "an", "the"}; （C++11）
向vector对象中添加元素
    v.push_back(e) 在尾部增加元素。…………最好不指定大小而使用pushback实现快速增长
其他vector操作：
    vector<int>::size_type √    vector
    范围for语句内不应该改变其遍历序列的大小。
    vector对象（以及string对象）的下标运算符，只能对确知已存在的元素执行下标操作，不能用于添加元素。

迭代器iterator
    所有标准库容器都可以使用迭代器。
    类似于指针类型，迭代器也提供了对对象的间接访问。
使用迭代器
    vector<int>::iterator iter。
    auto b = v.begin();返回指向第一个元素的迭代器。
    auto e = v.end();返回指向最后一个元素的下一个（，尾后,one past the end）的迭代器（off the end）。
    如果容器为空， begin()和 end()返回的是同一个迭代器，都是尾后迭代器。
        使用解引用符*访问迭代器指向的元素。(返回引用)
        箭头运算符： 解引用 + 成员访问，it->mem等价于 (*it).mem
        end不能使用++ --
    养成使用迭代器和!=的习惯（泛型编程）。
    容器：可以包含其他对象；但所有的对象必须类型相同。
    迭代器（iterator）：每种标准容器都有自己的迭代器。C++倾向于用迭代器而不是下标遍历元素。
    const_iterator：只能读取容器内元素不能改变。cbegin和cend
        谨记：但凡是使用了迭代器的循环体，都不要向迭代器所属的容器添加元素。
        范围for循环同样不能增加元素
    difference_type：保证足够大以存储任何两个迭代器对象间的距离，可正可负。

数组
    相当于vector的低级版，长度固定。
    定义和初始化内置数组
    初始化：char input_buffer[buffer_size];，长度必须是常量表达式，或者不写，让编译器自己推断。
    数组不允许直接赋值给另一个数组。
    初始化时可少不可多。[可用字符串字面值初始化字符数组]
访问数组元素
    数组下标的类型：size_t 。
    字符数组的特殊性：结尾处有一个空字符，如 char a[] = "hello"; 。
    用数组初始化 vector： int a[] = {1,2,3,4,5}; vector<int> v(begin(a), end(a));
数组和指针
    使用数组的名字时，编译器一般会把它转换成指向首元素的指针。
        decltype关键字转换时，不会把数组转化为指针
指针也是迭代器：
    数组的begin end函数 int *beg = begin(ia)
    ptrdiff_t类型：两指针之差
    标准库类型限定使用的下标必须是无符号类型，而内置的下标可以处理负值。
    指针访问数组：在表达式中使用数组名时，名字会自动转换成指向数组的第一个元素的指针。
    int *p = &ia[2] int j = p[1]…………p[1]等价于*(p+1) 指ia[3]
C风格字符串
    从C继承来的字符串。
    必须用空字符结束（\0）。
    对大多数应用来说，使用标准库 string比使用C风格字符串更安全、更高效。
    获取 string 中的 cstring ： const char *str = s.c_str(); 。
    C标准库String函数，定义在<cstring> 中
混用string与C风格字符串
    c_str成员函数：str.c_str()返回一个C风格字符串
使用数组初始化vector对象：
    指明拷贝区域首元素地址和尾后地址

多维数组
    多维数组的初始化： int ia[3][4] = {{0,1,2,3}, ...}。
    使用范围for语句时，除了最内层的循环外，其他所有循环的控制变量都应该是引用类型。
        防止外层被初始化为指针(外层元素可理解为以数组为元素的数组)
    