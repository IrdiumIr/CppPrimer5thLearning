Ch4 表达式

4.1 表达式基础
    表达式 = 运算对象 + (算符)
    n 元运算符：作用于 n 个对象的算符
    组合运算：优先级 & 结合律 & 求值顺序
    运算对象转换：小整数类型会被 [提升] 为较大的整数类型(如 int)
    重载运算符：当运算符作用在 [类类型] 的运算对象时，用户可以自行定义其含义。(string, vector等)
    左值和右值：
        C：左值可以在表达式左边，右值不能。
        Cpp：当一个对象被用作右值的时候，用的是对象的值(内容)；被用做左值时，用的是对象的身份(在内存中的位置)
        需要使用右值可以用左值代替，反之不然。
    优先级 & 结合律：从左至右，从高到低。括号优先
    求值顺序：f() + g() * h() + j()：g * h优先，随后从左到右相加。但是f, g, h, j调用顺序无规定。
        P147

4.2 算术运算符(右值)
    bool -> int, 尽量不参与运算
    溢出：计算的结果超出能表示的范围。(eg. short = 32767, ++short)
    除法：取余为 int, 除法扣除小数
    取余运算m%n，结果符号与m相同

4.3 逻辑和关系运算符(右值)
    短路求值： && 运算符和 || 运算符先求左侧运算对象的值再求右侧运算对象的值。
    声明为引用类型可以避免对元素的拷贝，节约时间。
    bool 比较运算时，避免使用 true & false 判断，除非对象是 bool 类型的。

4.4 赋值运算符(左值)
    赋值运算的返回结果是它的左侧运算对象(可修改的)，且是一个 [左值] 。结果类型也就是左侧对象的类型。
    赋值运算的右侧运算对象将转换成左侧运算对象的类型。
    赋值运算符满足 [右] 结合律。 ival = jval = 0;等价于ival = (jval = 0);
    赋值运算优先级比较低(低于关系运算)，使用时应该加括号。
    复合赋值运算符，复合运算符只求值一次，普通运算符求值两次。

4.5 递增递减运算符(左值)
    前置版本j = ++i，先加一，后赋值
    后置版本j = i++，先赋值，后加一
    优先使用前置版本，避免不必要的工作。后置增加了储存原始值的操作。
    *iter++ 等价于 *(iter++)，递增优先级较高。(先输出当前值，并将指针向前移动 1 位)
    
4.6 成员访问运算符(左/右值)
    ptr->mem等价于(*ptr).mem
    取值结果取决于运算符和运算对象。->运算符作用于指针，得到的结果为左值。
    而.运算符的结果由运算对象决定。

4.7 条件运算符(左/右值)
    条件运算符（?:）按照如下形式：cond? expr1: expr2
    首先对cond 条件进行判断，true 则执行expr1；false 则执行expr2。
    取值结果取决于expr1和expr2。仅当两者均为左值时结果为左值，否则结果为右值。
    可以嵌套使用，遵循右结合律，从右向左顺序组合。但不宜嵌套过多影响可读性。
    条件运算符优先级非常低，输出结果时需要加上括号。

4.8 位运算符(左/右值)
    作用于整数类型，用于检查和设置二进制位的功能。
    有符号数负值可能移位后变号，所以建议位运算符仅用于无符号数。
    二进制位向左移（<<）或者向右移（>>），右侧对象非负，且必须小于结果位数。移出边界外的位将被舍弃。
    提升位数：在高位增加 0
    位运算符满足左结合律，优先级介于中间(比算术低，比关系高)，使用时尽量加括号。

4.9 sizeof运算符
    sizeof()返回一条表达式或一个类型名字所占的字节数，得到的值的类型是size_t的constexpr。
    sizeof并不实际计算其运算对象的值。
    可用sizeof返回数组的大小，并通过sizeof(ia)/sizeof(*ia)得到数组元素个数。

4.10 逗号运算符
    运算符从左向右依次求值；左侧求值结果丢弃，结果是右侧表达式的值。

4.11 类型转换
    隐式类型转换：尽可能避免损失精度，会转换为更精细类型。(int->float)
    算术转换
        整型提升：char、bool、short优先转换成int，否则提升为unsigned int；
        wchar_t,char16_t,char32_t提升为各类int中最小的，且能容纳原类型所有可能值。
    显式类型转换(cast) P145
        cast-name<type>(expression)：static_cast，dynamic_cast，const_cast和reinterpret_cast。
        const_cast可以用于去除const特性