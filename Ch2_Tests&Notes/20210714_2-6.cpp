//ex2.11-2.
//2.11   指出下面的语句是声明还是定义：
//       (a) extern int ix = 1024;
//       (b) int iy;
//       (c) extern int iz;
//解：
//分别为：定义；定义；声明

//2.12   请指出下面的名字中哪些是非法的？
//       (a) int double = 3.14;
//       (b) int _;
//       (c) int catch-22;
//       (d) int 1_or_2 = 1;
//       (e) double Double = 3.14;
//解：(a)不能用double；(c)不能用-；(d)只能用数字和_开头

//2.13   下面程序中j的值是多少？
//      int i = 42;
//      int main()
//  {
//    int i = 100;
//    int j = i;
//  }
//解：j = 100。在函数体作用域内100覆盖了42

//2.14   下面的程序合法吗？如果合法，它将输出什么？
//       int i = 100, sum = 0;
//  for (int i = 0; i != 10; ++i)
//    sum += i;
//  std::cout << i << " " << sum << std::endl;
//解：合法。输出100(i)和45(sum)。

//2.15   下面的哪个定义是不合法的？为什么？
//      (a) int ival = 1.01;
//      (b) int &rval1 = 1.01;
//      (c) int &rval2 = ival;
//      (d) int &rval3;
//解：(b)不合法，引用必须绑定对象；(d)不合法，引用必须初始化。

//2.16   下面的哪个定义是不合法的？为什么？
//      考察下面的所有赋值然后回答：哪些赋值是不合法的？为什么？
//      哪些赋值是合法的？它们执行了哪些操作？
//      int i = 0, &r1 = i; double d = 0, &r2 = d;
//      (a) r2 = 3.14159;
//      (b) r2 = r1;
//      (c) i = r2;
//      (d) r1 = d;
//解：  (a): 合法。给 d 赋值为 3.14159；(b): 合法。会执行int-double的自动转换。
//      (c): 合法。但是会发生小数截取丢失信息；(d): 合法。但是会发生小数截取丢失信息。

//2.17   执行下面的代码段将输出什么结果？
//      int i, &ri = i;
//      i = 5; ri = 10;
//      std::cout << i << " " << ri << std::endl;
//解：输出结果为10 10。ri = 10 这一步对ri（i的引用）重新赋值为10。

//2.18   编写代码分别改变指针的值以及指针所指对象的值。
#include <iostream>

int main()
{   int a = 0, b = 1;
    int *p1 = &a, *p2 = p1;

    int *p3 = &b;
    std::cout << p3 << std::endl;
    std::cout << a << b << *p1 << *p2 << ' ' << p1 << ' ' << p2 << std::endl;
    // change the value of a pointer.
    p1 = &b;
    std::cout << a << b << *p1 << *p2 << ' ' << p1 << ' ' << p2 << std::endl;
    // change the value to which the pointer points
    *p2 = b;
    std::cout << a << b << *p1 << *p2 << ' ' << p1 << ' ' << p2 << std::endl;
}

//2.19   说明指针和引用的主要区别
//解：引用（左值）是一个对象的别名，操作是对绑定别名的对象进行的。而指针本身就是一个对象。
//引用必须初始化，一旦定义了引用就无法再绑定到其他对象。
//而指针无须在定义时赋初值（指向不确定的值），也可以重新赋值让其指向其他对象。

//2.20   请叙述下面这段代码的作用。
//      int i = 42;
//      int *p1 = &i; 
//      *p1 = *p1 * *p1;
//解：初始化了整型变量 i = 42。并初始化了一个指针 p1，让指针 p1 指向 i.
//然后将 i 的值重新赋值为 42 * 42。

//2.21   请解释下述定义。在这些定义中有非法的吗？如果有，为什么？
//      int i = 0;
//      (a) double* dp = &i;
//      (b) int *ip = i;
//      (c) int *p = &i;
//解：(a)非法，dp是指向double的指针，不能指向int。(b)非法，不能把int变量的值赋给ip指针。(c)合法。

//2.22   假设 p 是一个 int 型指针，请说明下述代码的含义。
//      if (p) // ...
//      if (*p) // ...
//解：第一句判断 p 是否为空指针, 第二句判断 p 所指向的对象的值是否为0。

//2.23   给定指针 p，你能知道它是否指向了一个合法的对象吗？
//       如果能，叙述判断的思路；如果不能，也请说明原因。
//解：*不能

//2.24   在下面这段代码中为什么 p 合法而 lp 非法？
//      int i = 42;
//      void *p = &i;
//      long *lp = &i;
//解：void *可以存放任何类型对象地址。其他指针类型必须要与对象类型严格匹配。

//2.25   说明下列变量的类型和值。
//      (a) int* ip, i, &r = i;
//      (b) int i, *ip = 0;
//      (c) int* ip, ip2;
//解：  (a): ip 是一个指向 int 的指针, i 是一个 int型变量, r 是 i 的引用。
//      (b): i 是 int型变量 , ip 是一个nullptr。
//      (c): ip 是一个指向 int 的指针, ip2 是一个 int型变量。

//2.26   下面哪些语句是合法的？如果不合法，请说明为什么？
//解：      const int buf;      // 不合法, 未初始化
//          int cnt = 0;        // 合法
//          const int sz = cnt; // 合法
//          ++cnt; ++sz;        // 不合法, const对象不能改变
